type Maybe a = Nothing | Just a

index : forall a. (len : Nat) -> Vector len a -> Int -> Maybe a
index Zero MkUnit _ = Nothing
index (Succ n) (MkPair x xs) 0 = Just x
index (Succ n) (MkPair x xs) i = index n xs (subInt i 1)

index2 : forall a. (len : Nat) -> Vector len a -> Int -> a
index2 Zero MkUnit _ = fail _
index2 (Succ n) (MkPair x xs) 0 = x
index2 (Succ n) (MkPair x xs) i = index2 n xs (subInt i 1)

index2' : forall a. (len : Nat) -> Vector len a -> Int -> a
index2' Zero MkUnit _ = fail _
index2' (Succ n) (MkPair x xs) 0 = x
index2' @a (Succ n) (MkPair x xs) i = index2' @a n xs (subInt i 1)

index3 : forall a. (len : Nat) -> Vector len a -> Int -> a
index3 @a len xs i = (C|
  memcpy(return_, $xs + $i * $(sizeOf a), $(sizeOf a));
|)

test = printInt (index3 (Succ (Succ (Succ Zero))) (MkPair 1 (MkPair 2 (MkPair 3 MkUnit))) 1)

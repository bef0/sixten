module Sixten.Builtin exposing
  ( Type
  , Int
  , Nat, Zero, Succ
  , Ptr, Ref
  , Bool
  , eqInt, addInt, subInt, maxInt, printInt
  , fail, sizeOf
  , Unit, MkUnit
  , Pair, MkPair
  , Vector
  , Array, MkArray
  , Byte
  , String, printString
  )

-------------------------------------------------------------------------------
-- Builtin things, special cased by the compiler

Type = _

Int = _

type Nat = Zero | Succ Nat

Pi = _

boxed
type Closure = MkClosure

type Equals @(t : Type) (a : t) (b : t) = Refl

-------------------------------------------------------------------------------

boxed
type Ptr a = Ref a

type Bool = False | True

abstract
eqInt : Int -> Int -> Bool
eqInt x y = (C|
  return $x == $y ? $True : $False;
|)

abstract
addInt : Int -> Int -> Int
addInt x y = (C|
  return $x + $y;
|)

abstract
subInt : Int -> Int -> Int
subInt x y = (C|
  return $x - $y;
|)

abstract
maxInt : Int -> Int -> Int
maxInt x y = (C|
  return $x > $y ? $x : $y;
|)

abstract
printInt : Int -> Int
printInt x = (C|
  printf("%" PRId64 "\n", $x);
  return 0;
|)

abstract
fail : (T : Type) -> T
fail _ = (C|
  exit(1);
|)

abstract
sizeOf : Type -> Int
sizeOf T = (C| return $T; |)

abstract
MkType : Int -> Type
MkType i = (C| return $i; |)

abstract
productTypeRep : Type -> Type -> Type
productTypeRep S T = MkType (addInt (sizeOf S) (sizeOf T))

abstract
sumTypeRep : Type -> Type -> Type
sumTypeRep S T = MkType (maxInt (sizeOf S) (sizeOf T))

type Unit = MkUnit
type Pair A B = MkPair A B

Vector : Nat -> Type -> Type
Vector Zero _ = Unit
Vector (Succ n) A = Pair A (Vector n A)

boxed
type Array A where
  MkArray : (n : Nat) -> Vector n A -> Array A

Byte : Type
Byte = MkType 1

type String = MkString (Array Byte)

printString : String -> Unit
printString (MkString (MkArray len data)) = (C|
#ifdef _WIN32
  // In MSVC, fd `1` corresponds to `stdout`.
  // See: https://msdn.microsoft.com/en-us/library/40bbyw78.aspx
  _write(1, (const void*)$data, $len);
#else
  write(STDOUT_FILENO, (const void*)$data, $len);
#endif
|)

abstract
StaticError : forall T. String -> T
StaticError str =
  let x = printString str
  fail _
